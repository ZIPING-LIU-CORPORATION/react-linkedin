function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* Auto generated, hash = 2xnr98u0iux66h5q9lkxquv5q */
//From LinkedIn TODO: Break this file down so that we can actually unit test it.
import React, { Component } from "react";
import { createRoot } from "react-dom/client";
import { cloneDeep } from "lodash";
export default class LinkedinBadgeLoader extends Component {
  //Must match callback on helpers.js
  //Keeps track of number of responses recieved for proper cleanup when finished
  //Keeps track of number of responses to expect
  //Keeps track of scripts added for proper cleanup when finished
  static isCNDomain() {
    if (typeof window !== "undefined") {
      const hostName = window?.location?.hostname || window?.location?.href || "";
      const url = new URL(hostName);
      const domain = url.hostname;
      return /linkedin(-ei)?.cn$/.test(domain);
    }

    return false;
  }

  static generateUrl(isEI) {
    const domainPrefix = isEI ? "https://badges.linkedin-ei" : "https://badges.linkedin";
    const domainSuffix = LinkedinBadgeLoader.isCNDomain() ? ".cn" : "";
    return `${domainPrefix}${domainSuffix}/js/linkedInBadge.js`;
  }

  constructor(props) {
    super(props);

    _defineProperty(this, "CALLBACK_NAME", "LIBadgeCallback");

    _defineProperty(this, "BADGE_NAMES", ["LI-profile-badge", "LI-entity-badge"]);

    _defineProperty(this, "SCRIPT_NAMES", ["badge-base__link", "LI-simple-link"]);

    _defineProperty(this, "TRACKING_PARAM", "profile-badge");

    _defineProperty(this, "responsesReceived", 0);

    _defineProperty(this, "expectedResponses", 0);

    _defineProperty(this, "scripts", []);

    _defineProperty(this, "childScripts", void 0);

    _defineProperty(this, "badges", void 0);

    this.state = {
      locale: props.locale || "en_US",
      size: props.size || "medium",
      theme: props.theme || "light",
      type: props.type || "horizontal",
      vanity: props.vanity || "liu",
      version: props.version || "v1",
      badgeLoaded: false
    };
    this.responseHandler = this.responseHandler.bind(this);
    this.childScripts = new Map();
    this.tryClean = this.tryClean.bind(this);
    this.liuRenderAll = this.liuRenderAll.bind(this);
    this.replaceScriptTags = this.replaceScriptTags.bind(this);
    this.badges = Array.prototype.slice.call(document.querySelectorAll(this.BADGE_NAMES.join(" ")).values(), 0);
    this.renderBadge = this.renderBadge.bind(this);
    window[this.CALLBACK_NAME] = this.responseHandler;
  }
  /**
   * Renders all unrendred LinkedIn Badges on the page
   */


  liuRenderAll() {
    // FROM LINKEDIN TODO -- tracking param for other badge types
    for (const badge of this.badges) {
      const rendered = badge.getAttribute("data-rendered");

      if (rendered !== null && rendered.length > 0) {
        this.expectedResponses++;
        badge.setAttribute("data-rendered", "true");
        this.renderBadge(badge);
      }
    }
  }

  getBadgeKeyQueryParams(badge) {
    const params = [];
    const key_regex = /data-(\w+)/;

    for (const attr of badge.attributes) {
      if (attr.name.startsWith("data-") && attr.name.match(key_regex)) {
        const paramsFound = attr.name.match(key_regex);
        paramsFound?.forEach(param => {
          params.push(`${param}=${attr.value}`);
        });
      }
    }

    return params;
  }
  /*
   * Renders a single badge on the page
   * @param badge: div element of badge to render
   */


  renderBadge(badge) {
    let size = badge.getAttribute("data-size") || "medium",
        locale = badge.getAttribute("data-locale") || "en_US",
        type = badge.getAttribute("data-type") || "vertical",
        theme = badge.getAttribute("data-theme") || "light",
        vanity = badge.getAttribute("data-vanity") || "",
        version = badge.getAttribute("data-version") || "v1",
        isEI = badge.hasAttribute("data-ei") || false,
        entity = badge.getAttribute("data-entity") || "",
        isCreatePage = badge.hasAttribute("data-iscreate") || false,
        uid = Math.round(1000000 * Math.random()),
        baseUrl = LinkedinBadgeLoader.generateUrl(isEI),
        queryParams = ["locale=" + encodeURIComponent(locale), "badgetype=" + encodeURIComponent(type), "badgetheme=" + encodeURIComponent(theme), "uid=" + encodeURIComponent(uid), "version=" + encodeURIComponent(version)];
    let url = baseUrl + "?" + queryParams.join("&");

    if (version === "v2") {
      baseUrl += "view";
      queryParams.push("badgesize=" + encodeURIComponent(size));
      queryParams.push("entity=" + encodeURIComponent(entity));
      queryParams = queryParams.concat(this.getBadgeKeyQueryParams(badge));
    } else {
      baseUrl += "profile";
      queryParams.push("maxsize=" + encodeURIComponent(size));
      queryParams.push("trk=" + encodeURIComponent(this.TRACKING_PARAM));
      queryParams.push("vanityname=" + encodeURIComponent(vanity));
    }

    if (isCreatePage) {
      queryParams.push("fromCreate=true");
    }

    url = baseUrl + "?" + queryParams.join("&");
    badge.setAttribute("data-uid", String(uid));
    this.setState({
      badgeLoaded: true
    });
    this.jsonp(url); //Calls responseHandler when done
  }
  /**
   * Handles a response from the server. Finds badge matching badgeUid and inserts badgeHtml there
   * @param badgeHtml: String representing contents of the badge
   * @param badgeUid: UID of the badge to target
   **/


  responseHandler(badgeHtml, badgeUid) {
    this.responsesReceived++;
    let i, badge, uid, isCreate;
    const defaultWidth = 330; // max possible width

    const defaultHeight = 300; // max possible height

    for (const badge of this.badges) {
      isCreate = badge.hasAttribute("data-iscreate");
      uid = badge.getAttribute("data-uid");

      if (uid === badgeUid) {
        const badgeMarkup = badge.innerHTML;
        const iframe = document.createElement("iframe");

        iframe.onload = () => {
          const iframeBody = iframe?.contentWindow?.document.body; // 5 px buffer to avoid the badge border being cut off.

          iframe.setAttribute("height", String((iframeBody?.scrollHeight || defaultHeight) + 5));
          iframe.setAttribute("width", String(iframeBody?.scrollWidth || defaultWidth) + 5);
        };

        createRoot(iframe).render( /*#__PURE__*/React.createElement("body", null, /*#__PURE__*/React.createElement(React.Fragment, null, badgeHtml)));
        iframe.appendChild(badge);
      }
    }
  } // These functions are needed because badge markup is added via innerHtml property which does not run script tags


  replaceScriptTags(node, isCreate) {
    if (this.shouldReplaceNode(node, isCreate)) {
      node.parentNode?.replaceChild(this.cloneScriptNode(node), node);
      this.childScripts.set(node, true);
    } else {
      let i = 0,
          children = node.childNodes;

      while (i < children.length) {
        this.replaceScriptTags(children[i++], isCreate);
      }
    }

    return node;
  }

  shouldReplaceNode(node, isCreate) {
    return this.isScriptNode(node) && !this.childScripts.get(node) && (!isCreate || isCreate && !node.getAttribute("data-isartdeco"));
  }

  isScriptNode(node) {
    return node.tagName === "SCRIPT";
  }

  cloneScriptNode(node) {
    const script = document.createElement("script");
    const cloneNode = cloneDeep(node);

    for (let i = cloneNode.attributes.length - 1; i >= 0; i--) {
      script.setAttribute(cloneNode.attributes[i].name, cloneNode.attributes[i].value);
    }

    return script;
  }

  render() {
    this.liuRenderAll();
    return /*#__PURE__*/React.createElement("div", {
      className: this.BADGE_NAMES.join(" "),
      "data-locale": this.props.locale,
      "data-size": this.props.size,
      "data-theme": this.props.theme,
      "data-type": this.props.type,
      "data-vanity": this.props.vanity,
      "data-version": this.props.version
    }, /*#__PURE__*/React.createElement("a", {
      className: this.SCRIPT_NAMES.join(" "),
      href: "https://www.linkedin.com/in/liu?trk=profile-badge"
    }, "Ziping L."));
  } // Gets all incoming responses

  /**
   * Tries to clean added tags
   **/


  tryClean() {
    //Clean up after all requests are done..
    //Accounts for people including script more than once
    const done = this.responsesReceived >= this.expectedResponses && this.expectedResponses > 0 || this.responsesReceived >= this.badges.length;

    if (done) {
      delete window[`${this.CALLBACK_NAME}`]; // remove all script tags

      this.scripts.map(function (script) {
        document.body.removeChild(script);
      });
    }
  }
  /*
   * Makes Jsonp request, responses handles by CALLBACK_NAME
   * @param url String: url of server to make request to
   */


  jsonp(url) {
    const script = document.createElement("script");
    script.src = url;
    this.scripts.push(script);
    document.body.appendChild(script);
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIkNvbXBvbmVudCIsImNyZWF0ZVJvb3QiLCJjbG9uZURlZXAiLCJMaW5rZWRpbkJhZGdlTG9hZGVyIiwiaXNDTkRvbWFpbiIsIndpbmRvdyIsImhvc3ROYW1lIiwibG9jYXRpb24iLCJob3N0bmFtZSIsImhyZWYiLCJ1cmwiLCJVUkwiLCJkb21haW4iLCJ0ZXN0IiwiZ2VuZXJhdGVVcmwiLCJpc0VJIiwiZG9tYWluUHJlZml4IiwiZG9tYWluU3VmZml4IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwibG9jYWxlIiwic2l6ZSIsInRoZW1lIiwidHlwZSIsInZhbml0eSIsInZlcnNpb24iLCJiYWRnZUxvYWRlZCIsInJlc3BvbnNlSGFuZGxlciIsImJpbmQiLCJjaGlsZFNjcmlwdHMiLCJNYXAiLCJ0cnlDbGVhbiIsImxpdVJlbmRlckFsbCIsInJlcGxhY2VTY3JpcHRUYWdzIiwiYmFkZ2VzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJCQURHRV9OQU1FUyIsImpvaW4iLCJ2YWx1ZXMiLCJyZW5kZXJCYWRnZSIsIkNBTExCQUNLX05BTUUiLCJiYWRnZSIsInJlbmRlcmVkIiwiZ2V0QXR0cmlidXRlIiwibGVuZ3RoIiwiZXhwZWN0ZWRSZXNwb25zZXMiLCJzZXRBdHRyaWJ1dGUiLCJnZXRCYWRnZUtleVF1ZXJ5UGFyYW1zIiwicGFyYW1zIiwia2V5X3JlZ2V4IiwiYXR0ciIsImF0dHJpYnV0ZXMiLCJuYW1lIiwic3RhcnRzV2l0aCIsIm1hdGNoIiwicGFyYW1zRm91bmQiLCJmb3JFYWNoIiwicGFyYW0iLCJwdXNoIiwidmFsdWUiLCJoYXNBdHRyaWJ1dGUiLCJlbnRpdHkiLCJpc0NyZWF0ZVBhZ2UiLCJ1aWQiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJiYXNlVXJsIiwicXVlcnlQYXJhbXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjb25jYXQiLCJUUkFDS0lOR19QQVJBTSIsIlN0cmluZyIsInNldFN0YXRlIiwianNvbnAiLCJiYWRnZUh0bWwiLCJiYWRnZVVpZCIsInJlc3BvbnNlc1JlY2VpdmVkIiwiaSIsImlzQ3JlYXRlIiwiZGVmYXVsdFdpZHRoIiwiZGVmYXVsdEhlaWdodCIsImJhZGdlTWFya3VwIiwiaW5uZXJIVE1MIiwiaWZyYW1lIiwiY3JlYXRlRWxlbWVudCIsIm9ubG9hZCIsImlmcmFtZUJvZHkiLCJjb250ZW50V2luZG93IiwiYm9keSIsInNjcm9sbEhlaWdodCIsInNjcm9sbFdpZHRoIiwicmVuZGVyIiwiYXBwZW5kQ2hpbGQiLCJub2RlIiwic2hvdWxkUmVwbGFjZU5vZGUiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIiwiY2xvbmVTY3JpcHROb2RlIiwic2V0IiwiY2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwiaXNTY3JpcHROb2RlIiwiZ2V0IiwidGFnTmFtZSIsInNjcmlwdCIsImNsb25lTm9kZSIsIlNDUklQVF9OQU1FUyIsImRvbmUiLCJzY3JpcHRzIiwibWFwIiwicmVtb3ZlQ2hpbGQiLCJzcmMiXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIEF1dG8gZ2VuZXJhdGVkLCBoYXNoID0gMnhucjk4dTBpdXg2Nmg1cTlsa3hxdXY1cSAqL1xyXG4vL0Zyb20gTGlua2VkSW4gVE9ETzogQnJlYWsgdGhpcyBmaWxlIGRvd24gc28gdGhhdCB3ZSBjYW4gYWN0dWFsbHkgdW5pdCB0ZXN0IGl0LlxyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSBcInJlYWN0LWRvbS9jbGllbnRcIjtcclxuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSBcImxvZGFzaFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgTGlua2VkaW5CYWRnZUxvYWRlclByb3BzID0ge1xyXG4gIGxvY2FsZT86c3RyaW5nO1xyXG4gIHNpemU/OidzbWFsbCd8J21lZGl1bSd8J2xhcmdlJztcclxuICAgdGhlbWU/OidkYXJrJ3wnbGlnaHQnO1xyXG4gICB0eXBlPzonaG9yaXpvbnRhbCd8J3ZlcnRpY2FsJztcclxuICAgdmFuaXR5PzpzdHJpbmc7XHJcbiAgIHZlcnNpb24/Oid2MSd8J3YyJztcclxuIH1cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlua2VkaW5CYWRnZUxvYWRlciBleHRlbmRzIENvbXBvbmVudDxhbnksUmVxdWlyZWQ8TGlua2VkaW5CYWRnZUxvYWRlclByb3BzICYge2JhZGdlTG9hZGVkOmJvb2xlYW59PiA+IHtcclxuICByZWFkb25seSBDQUxMQkFDS19OQU1FOiBzdHJpbmcgPSBcIkxJQmFkZ2VDYWxsYmFja1wiOyAvL011c3QgbWF0Y2ggY2FsbGJhY2sgb24gaGVscGVycy5qc1xyXG4gIHJlYWRvbmx5IEJBREdFX05BTUVTID0gW1wiTEktcHJvZmlsZS1iYWRnZVwiLCBcIkxJLWVudGl0eS1iYWRnZVwiXTtcclxuICByZWFkb25seSBTQ1JJUFRfTkFNRVMgPVtcImJhZGdlLWJhc2VfX2xpbmtcIiwgXCJMSS1zaW1wbGUtbGlua1wiXVxyXG4gIFxyXG4gIHJlYWRvbmx5IFRSQUNLSU5HX1BBUkFNID0gXCJwcm9maWxlLWJhZGdlXCI7XHJcbiAgcHJpdmF0ZSByZXNwb25zZXNSZWNlaXZlZCA9IDA7IC8vS2VlcHMgdHJhY2sgb2YgbnVtYmVyIG9mIHJlc3BvbnNlcyByZWNpZXZlZCBmb3IgcHJvcGVyIGNsZWFudXAgd2hlbiBmaW5pc2hlZFxyXG4gIHByaXZhdGUgZXhwZWN0ZWRSZXNwb25zZXMgPSAwOyAvL0tlZXBzIHRyYWNrIG9mIG51bWJlciBvZiByZXNwb25zZXMgdG8gZXhwZWN0XHJcbiAgcHJpdmF0ZSBzY3JpcHRzOiBIVE1MU2NyaXB0RWxlbWVudFtdID0gW107IC8vS2VlcHMgdHJhY2sgb2Ygc2NyaXB0cyBhZGRlZCBmb3IgcHJvcGVyIGNsZWFudXAgd2hlbiBmaW5pc2hlZFxyXG4gIHByaXZhdGUgY2hpbGRTY3JpcHRzOiBNYXA8Tm9kZSwgYm9vbGVhbj47XHJcbiAgcmVhZG9ubHkgYmFkZ2VzOiBIVE1MRWxlbWVudFtdO1xyXG5cclxuICBzdGF0aWMgaXNDTkRvbWFpbigpIHtcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgIGNvbnN0IGhvc3ROYW1lID1cclxuICAgICAgICB3aW5kb3c/LmxvY2F0aW9uPy5ob3N0bmFtZSB8fCB3aW5kb3c/LmxvY2F0aW9uPy5ocmVmIHx8IFwiXCI7XHJcblxyXG4gICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGhvc3ROYW1lKTtcclxuICAgICAgY29uc3QgZG9tYWluID0gdXJsLmhvc3RuYW1lO1xyXG4gICAgICByZXR1cm4gL2xpbmtlZGluKC1laSk/LmNuJC8udGVzdChkb21haW4pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgc3RhdGljIGdlbmVyYXRlVXJsKGlzRUk6IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IGRvbWFpblByZWZpeCA9IGlzRUlcclxuICAgICAgPyBcImh0dHBzOi8vYmFkZ2VzLmxpbmtlZGluLWVpXCJcclxuICAgICAgOiBcImh0dHBzOi8vYmFkZ2VzLmxpbmtlZGluXCI7XHJcbiAgICBjb25zdCBkb21haW5TdWZmaXggPSBMaW5rZWRpbkJhZGdlTG9hZGVyLmlzQ05Eb21haW4oKSA/IFwiLmNuXCIgOiBcIlwiO1xyXG4gICAgcmV0dXJuIGAke2RvbWFpblByZWZpeH0ke2RvbWFpblN1ZmZpeH0vanMvbGlua2VkSW5CYWRnZS5qc2A7XHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBMaW5rZWRpbkJhZGdlTG9hZGVyUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGxvY2FsZTogcHJvcHMubG9jYWxlIHx8IFwiZW5fVVNcIixcclxuICAgICAgc2l6ZTogcHJvcHMuc2l6ZSB8fCBcIm1lZGl1bVwiLFxyXG4gICAgICB0aGVtZTogcHJvcHMudGhlbWUgfHwgXCJsaWdodFwiLFxyXG4gICAgICB0eXBlOiBwcm9wcy50eXBlIHx8IFwiaG9yaXpvbnRhbFwiLFxyXG4gICAgICB2YW5pdHk6IHByb3BzLnZhbml0eSB8fCBcImxpdVwiLFxyXG4gICAgICB2ZXJzaW9uOiBwcm9wcy52ZXJzaW9uIHx8IFwidjFcIixcclxuICAgICAgYmFkZ2VMb2FkZWQ6IGZhbHNlXHJcbiAgICB9O1xyXG4gICAgdGhpcy5yZXNwb25zZUhhbmRsZXIgPSB0aGlzLnJlc3BvbnNlSGFuZGxlci5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5jaGlsZFNjcmlwdHMgPSBuZXcgTWFwPE5vZGUsIGJvb2xlYW4+KCk7XHJcbiAgICB0aGlzLnRyeUNsZWFuID0gdGhpcy50cnlDbGVhbi5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5saXVSZW5kZXJBbGwgPSB0aGlzLmxpdVJlbmRlckFsbC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5yZXBsYWNlU2NyaXB0VGFncyA9IHRoaXMucmVwbGFjZVNjcmlwdFRhZ3MuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuYmFkZ2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5CQURHRV9OQU1FUy5qb2luKFwiIFwiKSkudmFsdWVzKCksXHJcbiAgICAgIDBcclxuICAgICk7XHJcbiAgICB0aGlzLnJlbmRlckJhZGdlID0gdGhpcy5yZW5kZXJCYWRnZS5iaW5kKHRoaXMpO1xyXG5cclxuICAgICh3aW5kb3cgYXMgYW55KVt0aGlzLkNBTExCQUNLX05BTUVdID0gdGhpcy5yZXNwb25zZUhhbmRsZXI7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJlbmRlcnMgYWxsIHVucmVuZHJlZCBMaW5rZWRJbiBCYWRnZXMgb24gdGhlIHBhZ2VcclxuICAgKi9cclxuICBsaXVSZW5kZXJBbGwoKSB7XHJcbiAgICAvLyBGUk9NIExJTktFRElOIFRPRE8gLS0gdHJhY2tpbmcgcGFyYW0gZm9yIG90aGVyIGJhZGdlIHR5cGVzXHJcblxyXG4gICAgZm9yIChjb25zdCBiYWRnZSBvZiB0aGlzLmJhZGdlcykge1xyXG4gICAgICBjb25zdCByZW5kZXJlZCA9IGJhZGdlLmdldEF0dHJpYnV0ZShcImRhdGEtcmVuZGVyZWRcIik7XHJcbiAgICAgIGlmIChyZW5kZXJlZCAhPT0gbnVsbCAmJiByZW5kZXJlZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdGhpcy5leHBlY3RlZFJlc3BvbnNlcysrO1xyXG4gICAgICAgIGJhZGdlLnNldEF0dHJpYnV0ZShcImRhdGEtcmVuZGVyZWRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyQmFkZ2UoYmFkZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRCYWRnZUtleVF1ZXJ5UGFyYW1zKGJhZGdlOiBIVE1MRWxlbWVudCkge1xyXG4gICAgY29uc3QgcGFyYW1zOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgY29uc3Qga2V5X3JlZ2V4ID0gL2RhdGEtKFxcdyspLztcclxuICAgIGZvciAoY29uc3QgYXR0ciBvZiBiYWRnZS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgIGlmIChhdHRyLm5hbWUuc3RhcnRzV2l0aChcImRhdGEtXCIpICYmIGF0dHIubmFtZS5tYXRjaChrZXlfcmVnZXgpKSB7XHJcbiAgICAgICAgY29uc3QgcGFyYW1zRm91bmQgPSBhdHRyLm5hbWUubWF0Y2goa2V5X3JlZ2V4KTtcclxuXHJcbiAgICAgICAgcGFyYW1zRm91bmQ/LmZvckVhY2goKHBhcmFtKSA9PiB7XHJcbiAgICAgICAgICBwYXJhbXMucHVzaChgJHtwYXJhbX09JHthdHRyLnZhbHVlfWApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFyYW1zO1xyXG5cclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICogUmVuZGVycyBhIHNpbmdsZSBiYWRnZSBvbiB0aGUgcGFnZVxyXG4gICAqIEBwYXJhbSBiYWRnZTogZGl2IGVsZW1lbnQgb2YgYmFkZ2UgdG8gcmVuZGVyXHJcbiAgICovXHJcbiAgcmVuZGVyQmFkZ2UoYmFkZ2U6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBsZXQgc2l6ZSA9IGJhZGdlLmdldEF0dHJpYnV0ZShcImRhdGEtc2l6ZVwiKSB8fCBcIm1lZGl1bVwiLFxyXG4gICAgICBsb2NhbGUgPSBiYWRnZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWxvY2FsZVwiKSB8fCBcImVuX1VTXCIsXHJcbiAgICAgIHR5cGUgPSBiYWRnZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXR5cGVcIikgfHwgXCJ2ZXJ0aWNhbFwiLFxyXG4gICAgICB0aGVtZSA9IGJhZGdlLmdldEF0dHJpYnV0ZShcImRhdGEtdGhlbWVcIikgfHwgXCJsaWdodFwiLFxyXG4gICAgICB2YW5pdHkgPSBiYWRnZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbml0eVwiKSB8fCBcIlwiLFxyXG4gICAgICB2ZXJzaW9uID0gYmFkZ2UuZ2V0QXR0cmlidXRlKFwiZGF0YS12ZXJzaW9uXCIpIHx8IFwidjFcIixcclxuICAgICAgaXNFSSA9IGJhZGdlLmhhc0F0dHJpYnV0ZShcImRhdGEtZWlcIikgfHwgZmFsc2UsXHJcbiAgICAgIGVudGl0eSA9IGJhZGdlLmdldEF0dHJpYnV0ZShcImRhdGEtZW50aXR5XCIpIHx8IFwiXCIsXHJcbiAgICAgIGlzQ3JlYXRlUGFnZSA9IGJhZGdlLmhhc0F0dHJpYnV0ZShcImRhdGEtaXNjcmVhdGVcIikgfHwgZmFsc2UsXHJcbiAgICAgIHVpZCA9IE1hdGgucm91bmQoMTAwMDAwMCAqIE1hdGgucmFuZG9tKCkpLFxyXG4gICAgICBiYXNlVXJsID0gTGlua2VkaW5CYWRnZUxvYWRlci5nZW5lcmF0ZVVybChpc0VJKSxcclxuICAgICAgcXVlcnlQYXJhbXMgPSBbXHJcbiAgICAgICAgXCJsb2NhbGU9XCIgKyBlbmNvZGVVUklDb21wb25lbnQobG9jYWxlKSxcclxuICAgICAgICBcImJhZGdldHlwZT1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh0eXBlKSxcclxuICAgICAgICBcImJhZGdldGhlbWU9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodGhlbWUpLFxyXG4gICAgICAgIFwidWlkPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHVpZCksXHJcbiAgICAgICAgXCJ2ZXJzaW9uPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHZlcnNpb24pLFxyXG4gICAgICBdO1xyXG5cclxuICAgIGxldCB1cmwgPSBiYXNlVXJsICsgXCI/XCIgKyBxdWVyeVBhcmFtcy5qb2luKFwiJlwiKTtcclxuXHJcbiAgICBpZiAodmVyc2lvbiA9PT0gXCJ2MlwiKSB7XHJcbiAgICAgIGJhc2VVcmwgKz0gXCJ2aWV3XCI7XHJcbiAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goXCJiYWRnZXNpemU9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoc2l6ZSkpO1xyXG4gICAgICBxdWVyeVBhcmFtcy5wdXNoKFwiZW50aXR5PVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGVudGl0eSkpO1xyXG4gICAgICBxdWVyeVBhcmFtcyA9IHF1ZXJ5UGFyYW1zLmNvbmNhdCh0aGlzLmdldEJhZGdlS2V5UXVlcnlQYXJhbXMoYmFkZ2UpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGJhc2VVcmwgKz0gXCJwcm9maWxlXCI7XHJcbiAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goXCJtYXhzaXplPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHNpemUpKTtcclxuICAgICAgcXVlcnlQYXJhbXMucHVzaChcInRyaz1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLlRSQUNLSU5HX1BBUkFNKSk7XHJcbiAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goXCJ2YW5pdHluYW1lPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbml0eSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0NyZWF0ZVBhZ2UpIHtcclxuICAgICAgcXVlcnlQYXJhbXMucHVzaChcImZyb21DcmVhdGU9dHJ1ZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICB1cmwgPSBiYXNlVXJsICsgXCI/XCIgKyBxdWVyeVBhcmFtcy5qb2luKFwiJlwiKTtcclxuICAgIGJhZGdlLnNldEF0dHJpYnV0ZShcImRhdGEtdWlkXCIsIFN0cmluZyh1aWQpKTtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBiYWRnZUxvYWRlZDogdHJ1ZSB9KTtcclxuICAgIHRoaXMuanNvbnAodXJsKTsgLy9DYWxscyByZXNwb25zZUhhbmRsZXIgd2hlbiBkb25lXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGVzIGEgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyLiBGaW5kcyBiYWRnZSBtYXRjaGluZyBiYWRnZVVpZCBhbmQgaW5zZXJ0cyBiYWRnZUh0bWwgdGhlcmVcclxuICAgKiBAcGFyYW0gYmFkZ2VIdG1sOiBTdHJpbmcgcmVwcmVzZW50aW5nIGNvbnRlbnRzIG9mIHRoZSBiYWRnZVxyXG4gICAqIEBwYXJhbSBiYWRnZVVpZDogVUlEIG9mIHRoZSBiYWRnZSB0byB0YXJnZXRcclxuICAgKiovXHJcbiAgcmVzcG9uc2VIYW5kbGVyKGJhZGdlSHRtbDogSFRNTEVsZW1lbnQsIGJhZGdlVWlkOiBzdHJpbmcpIHtcclxuICAgIHRoaXMucmVzcG9uc2VzUmVjZWl2ZWQrKztcclxuXHJcbiAgICBsZXQgaSwgYmFkZ2UsIHVpZCwgaXNDcmVhdGU7XHJcbiAgICBjb25zdCBkZWZhdWx0V2lkdGggPSAzMzA7IC8vIG1heCBwb3NzaWJsZSB3aWR0aFxyXG4gICAgY29uc3QgZGVmYXVsdEhlaWdodCA9IDMwMDsgLy8gbWF4IHBvc3NpYmxlIGhlaWdodFxyXG5cclxuICAgIGZvciAoY29uc3QgYmFkZ2Ugb2YgdGhpcy5iYWRnZXMpIHtcclxuICAgICAgaXNDcmVhdGUgPSBiYWRnZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLWlzY3JlYXRlXCIpO1xyXG4gICAgICB1aWQgPSBiYWRnZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXVpZFwiKTtcclxuICAgICAgaWYgKHVpZCA9PT0gYmFkZ2VVaWQpIHtcclxuICAgICAgICBjb25zdCBiYWRnZU1hcmt1cCA9IGJhZGdlLmlubmVySFRNTDtcclxuXHJcbiAgICAgICAgY29uc3QgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcclxuICAgICAgICBpZnJhbWUub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgaWZyYW1lQm9keSA9IGlmcmFtZT8uY29udGVudFdpbmRvdz8uZG9jdW1lbnQuYm9keTtcclxuICAgICAgICAgIC8vIDUgcHggYnVmZmVyIHRvIGF2b2lkIHRoZSBiYWRnZSBib3JkZXIgYmVpbmcgY3V0IG9mZi5cclxuICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgIFN0cmluZygoaWZyYW1lQm9keT8uc2Nyb2xsSGVpZ2h0IHx8IGRlZmF1bHRIZWlnaHQpICsgNSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKFxyXG4gICAgICAgICAgICBcIndpZHRoXCIsXHJcbiAgICAgICAgICAgIFN0cmluZyhpZnJhbWVCb2R5Py5zY3JvbGxXaWR0aCB8fCBkZWZhdWx0V2lkdGgpICsgNVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjcmVhdGVSb290KGlmcmFtZSkucmVuZGVyKFxyXG4gICAgICAgICAgPGJvZHk+XHJcbiAgICAgICAgICAgIDw+e2JhZGdlSHRtbH08Lz5cclxuICAgICAgICAgIDwvYm9keT5cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZnJhbWUuYXBwZW5kQ2hpbGQoYmFkZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBUaGVzZSBmdW5jdGlvbnMgYXJlIG5lZWRlZCBiZWNhdXNlIGJhZGdlIG1hcmt1cCBpcyBhZGRlZCB2aWEgaW5uZXJIdG1sIHByb3BlcnR5IHdoaWNoIGRvZXMgbm90IHJ1biBzY3JpcHQgdGFnc1xyXG4gIHJlcGxhY2VTY3JpcHRUYWdzKG5vZGU6IE5vZGUsIGlzQ3JlYXRlOiBib29sZWFuKSB7XHJcbiAgICBpZiAodGhpcy5zaG91bGRSZXBsYWNlTm9kZShub2RlIGFzIEhUTUxFbGVtZW50LCBpc0NyZWF0ZSkpIHtcclxuICAgICAgbm9kZS5wYXJlbnROb2RlPy5yZXBsYWNlQ2hpbGQoXHJcbiAgICAgICAgdGhpcy5jbG9uZVNjcmlwdE5vZGUobm9kZSBhcyBIVE1MRWxlbWVudCksXHJcbiAgICAgICAgbm9kZVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmNoaWxkU2NyaXB0cy5zZXQobm9kZSwgdHJ1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZXQgaSA9IDAsXHJcbiAgICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgIHdoaWxlIChpIDwgY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy5yZXBsYWNlU2NyaXB0VGFncyhjaGlsZHJlbltpKytdLCBpc0NyZWF0ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBub2RlO1xyXG4gIH1cclxuXHJcbiAgc2hvdWxkUmVwbGFjZU5vZGUobm9kZTogSFRNTEVsZW1lbnQsIGlzQ3JlYXRlOiBib29sZWFuKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB0aGlzLmlzU2NyaXB0Tm9kZShub2RlKSAmJlxyXG4gICAgICAhdGhpcy5jaGlsZFNjcmlwdHMuZ2V0KG5vZGUpICYmXHJcbiAgICAgICghaXNDcmVhdGUgfHwgKGlzQ3JlYXRlICYmICFub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtaXNhcnRkZWNvXCIpKSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBpc1NjcmlwdE5vZGUobm9kZTogSFRNTEVsZW1lbnQpIHtcclxuICAgIHJldHVybiBub2RlLnRhZ05hbWUgPT09IFwiU0NSSVBUXCI7XHJcbiAgfVxyXG4gIGNsb25lU2NyaXB0Tm9kZShub2RlOiBIVE1MRWxlbWVudCkge1xyXG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcclxuXHJcbiAgICBjb25zdCBjbG9uZU5vZGUgPSBjbG9uZURlZXAobm9kZSk7XHJcbiAgICBmb3IgKGxldCBpID0gY2xvbmVOb2RlLmF0dHJpYnV0ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZShcclxuICAgICAgICBjbG9uZU5vZGUuYXR0cmlidXRlc1tpXS5uYW1lLFxyXG4gICAgICAgIGNsb25lTm9kZS5hdHRyaWJ1dGVzW2ldLnZhbHVlXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2NyaXB0O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgdGhpcy5saXVSZW5kZXJBbGwoKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzc05hbWU9e3RoaXMuQkFER0VfTkFNRVMuam9pbihcIiBcIil9XHJcbiAgICAgICAgZGF0YS1sb2NhbGU9e3RoaXMucHJvcHMubG9jYWxlfVxyXG4gICAgICAgIGRhdGEtc2l6ZT17dGhpcy5wcm9wcy5zaXplfVxyXG4gICAgICAgIGRhdGEtdGhlbWU9e3RoaXMucHJvcHMudGhlbWV9XHJcbiAgICAgICAgZGF0YS10eXBlPXt0aGlzLnByb3BzLnR5cGV9XHJcbiAgICAgICAgZGF0YS12YW5pdHk9ICB7dGhpcy5wcm9wcy52YW5pdHl9XHJcbiAgICAgICAgZGF0YS12ZXJzaW9uPXt0aGlzLnByb3BzLnZlcnNpb259XHJcbiAgICAgID5cclxuICAgICAgICA8YVxyXG4gICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLlNDUklQVF9OQU1FUy5qb2luKFwiIFwiKX1cclxuICAgICAgICAgIGhyZWY9XCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vbGl1P3Ryaz1wcm9maWxlLWJhZGdlXCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICBaaXBpbmcgTC5cclxuICAgICAgICA8L2E+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIEdldHMgYWxsIGluY29taW5nIHJlc3BvbnNlc1xyXG5cclxuICAvKipcclxuICAgKiBUcmllcyB0byBjbGVhbiBhZGRlZCB0YWdzXHJcbiAgICoqL1xyXG4gIHRyeUNsZWFuKCkge1xyXG4gICAgLy9DbGVhbiB1cCBhZnRlciBhbGwgcmVxdWVzdHMgYXJlIGRvbmUuLlxyXG4gICAgLy9BY2NvdW50cyBmb3IgcGVvcGxlIGluY2x1ZGluZyBzY3JpcHQgbW9yZSB0aGFuIG9uY2VcclxuICAgIGNvbnN0IGRvbmUgPVxyXG4gICAgICAodGhpcy5yZXNwb25zZXNSZWNlaXZlZCA+PSB0aGlzLmV4cGVjdGVkUmVzcG9uc2VzICYmXHJcbiAgICAgICAgdGhpcy5leHBlY3RlZFJlc3BvbnNlcyA+IDApIHx8XHJcbiAgICAgIHRoaXMucmVzcG9uc2VzUmVjZWl2ZWQgPj0gdGhpcy5iYWRnZXMubGVuZ3RoO1xyXG4gICAgaWYgKGRvbmUpIHtcclxuICAgICAgZGVsZXRlICh3aW5kb3cgYXMgYW55KVtgJHt0aGlzLkNBTExCQUNLX05BTUV9YF07XHJcblxyXG4gICAgICAvLyByZW1vdmUgYWxsIHNjcmlwdCB0YWdzXHJcbiAgICAgIHRoaXMuc2NyaXB0cy5tYXAoZnVuY3Rpb24gKHNjcmlwdCkge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICogTWFrZXMgSnNvbnAgcmVxdWVzdCwgcmVzcG9uc2VzIGhhbmRsZXMgYnkgQ0FMTEJBQ0tfTkFNRVxyXG4gICAqIEBwYXJhbSB1cmwgU3RyaW5nOiB1cmwgb2Ygc2VydmVyIHRvIG1ha2UgcmVxdWVzdCB0b1xyXG4gICAqL1xyXG4gIGpzb25wKHVybDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG4gICAgc2NyaXB0LnNyYyA9IHVybDtcclxuICAgIHRoaXMuc2NyaXB0cy5wdXNoKHNjcmlwdCk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiAgfVxyXG59XHJcblxyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBLE9BQU9BLEtBQVAsSUFBZ0JDLFNBQWhCLFFBQWlDLE9BQWpDO0FBRUEsU0FBU0MsVUFBVCxRQUEyQixrQkFBM0I7QUFDQSxTQUFTQyxTQUFULFFBQTBCLFFBQTFCO0FBVUEsZUFBZSxNQUFNQyxtQkFBTixTQUFrQ0gsU0FBbEMsQ0FBNkc7RUFDdEU7RUFLckI7RUFDQTtFQUNZO0VBSTFCLE9BQVZJLFVBQVUsR0FBRztJQUNsQixJQUFJLE9BQU9DLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7TUFDakMsTUFBTUMsUUFBUSxHQUNaRCxNQUFNLEVBQUVFLFFBQVIsRUFBa0JDLFFBQWxCLElBQThCSCxNQUFNLEVBQUVFLFFBQVIsRUFBa0JFLElBQWhELElBQXdELEVBRDFEO01BR0EsTUFBTUMsR0FBRyxHQUFHLElBQUlDLEdBQUosQ0FBUUwsUUFBUixDQUFaO01BQ0EsTUFBTU0sTUFBTSxHQUFHRixHQUFHLENBQUNGLFFBQW5CO01BQ0EsT0FBTyxxQkFBcUJLLElBQXJCLENBQTBCRCxNQUExQixDQUFQO0lBQ0Q7O0lBRUQsT0FBTyxLQUFQO0VBQ0Q7O0VBQ2lCLE9BQVhFLFdBQVcsQ0FBQ0MsSUFBRCxFQUFnQjtJQUNoQyxNQUFNQyxZQUFZLEdBQUdELElBQUksR0FDckIsNEJBRHFCLEdBRXJCLHlCQUZKO0lBR0EsTUFBTUUsWUFBWSxHQUFHZCxtQkFBbUIsQ0FBQ0MsVUFBcEIsS0FBbUMsS0FBbkMsR0FBMkMsRUFBaEU7SUFDQSxPQUFRLEdBQUVZLFlBQWEsR0FBRUMsWUFBYSxzQkFB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